/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M15
 * Generated at: 2017-01-13 05:41:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.impliciteObject.session;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class sessionPro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- loginForm.jsp(id/pwd) -> sessionPro.jsp -->\r\n");
      out.write("    \r\n");
      out.write("<!-- \r\n");
      out.write("\tsession 내장객체\r\n");
      out.write("\t- 서버에서 사용자를 구분할 수 있는 key를 생성하는 역할\r\n");
      out.write("\t1. 로그인 시스템에서 사용자 인증\r\n");
      out.write("\t2. 쇼핑몰에서 장바구니 기능 구현\r\n");
      out.write("\t3. 세션 key 사용 범위 : 동일한 브라우저에서 생성된 모든 페이지\r\n");
      out.write(" -->\r\n");
      out.write(" \r\n");
      out.write(" ");

 	// 1. user 정보 받기
 	String id = request.getParameter("id");
 	String pwd = request.getParameter("pwd");
 	
 	// 2. user 정보 이용 -> session key 생성
 	session.setAttribute("ID", id);
 
      out.write("\r\n");
      out.write(" \r\n");
      out.write(" <h2> 로그인 사용자 정보 </h2>\r\n");
      out.write(" <h3> 사용자 세션 key : ");
      out.print(session.getAttribute("ID") );
      out.write("</h3>\r\n");
      out.write(" <h3> 세션 ID : ");
      out.print(session.getId() );
      out.write("</h3>\r\n");
      out.write(" <h3> 세션 유지시간 : ");
      out.print(session.getMaxInactiveInterval() );
      out.write("</h3>\r\n");
      out.write(" \r\n");
      out.write(" <a href=\"sessionOut.jsp\">로그아웃</a>\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" <!-- \r\n");
      out.write(" \t내장객체에서 공통으로 사용되는 method\r\n");
      out.write(" \t- 내장객체 : request, session, application\r\n");
      out.write(" \t- 공통 method \r\n");
      out.write(" \t1) setAttribute(\"key\",value);  // key 생성\r\n");
      out.write(" \t2) getAttribute(\"key\");  // key 획득\r\n");
      out.write(" \t3) removeAttribute(\"key\");  // key 제거\r\n");
      out.write(" \t\r\n");
      out.write(" \t- 내장객체별 key 사용범위\r\n");
      out.write(" \t1) request : 포워딩된 페이지에서 사용\r\n");
      out.write(" \t\t-> 페이지 단위\r\n");
      out.write(" \t2) session : 동일한 브라우저에서 생성된 모든 페이지 사용\r\n");
      out.write(" \t\t-> user 구분 용도 : 브라우저 단위\r\n");
      out.write(" \t3) application : 응용 프로그램에서 생성된 모든 페이지 사용\r\n");
      out.write(" \t\t-> 채팅 창 구현 용도 : 서로 다른 브라우저 (서로 다른 어플리케이션)\r\n");
      out.write("  -->\r\n");
      out.write(" ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
