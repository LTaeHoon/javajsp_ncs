/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M15
 * Generated at: 2017-01-31 06:52:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class member_005fjoin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>회원가입 폼</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"./css/member.css\">\r\n");
      out.write("<!-- 제이쿼리 라이브러리 링크 -->\r\n");
      out.write("<script src=\"./js/jquery-3.js\"></script>\r\n");
      out.write("<!-- 회원가입에 있어서 데이터를 검증하는 외부 자바스크립트 파일 링크  -->\r\n");
      out.write("<script src=\"./js/member.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("  $(function(){ // 현재 문서가 브라우저로 로딩될 때 자동 호출되는 무명함수\t\t\r\n");
      out.write("\t  //아이디 검사 및 중복체크\r\n");
      out.write("\t   $(\"#idcheck_btn\").mouseover(function(){ // 마우스 오버 시\t   \r\n");
      out.write("\t   \t    $(\"#idcheck\").hide();//idcheck 영역을 숨김\r\n");
      out.write("\t  \t\tvar userId=$(\"#member_id\").val(); // 아이디 저장\r\n");
      out.write("\t  \t\t//1.입력 아이디 길이 체크\r\n");
      out.write("\t  \t\tif($.trim($(\"#member_id\").val()).length < 4){\r\n");
      out.write("\t  \t\t\tvar warningTxt='<font color=\"red\">아이디는 4자 이상이어야 합니다.</font>';\r\n");
      out.write("\t  \t\t\t$(\"#idcheck\").text('');// idcheck 영역 초기화\r\n");
      out.write("\t  \t\t\t$(\"#idcheck\").show();// idcheck 영역 보임\r\n");
      out.write("\t  \t\t\t$(\"#idcheck\").append(warningTxt);//idcheck 영역에 경고메시지 추가\t   \t\t\t\r\n");
      out.write("\t  \t\t\t$(\"#member_id\").val('').focus();// member_id 텍스트 상자에 커서 이동\r\n");
      out.write("\t  \t\t\treturn false;\r\n");
      out.write("\t  \t\t};\r\n");
      out.write("\t  \t\tif($.trim($(\"#member_id\").val()).length > 12){\r\n");
      out.write("\t  \t\t\tvar warningTxt='<font color=\"red\">아이디는 12자 이하이어야 합니다.</font>';\r\n");
      out.write("\t  \t\t\t$(\"#idcheck\").text('');\r\n");
      out.write("\t  \t\t\t$(\"#idcheck\").show();\r\n");
      out.write("\t  \t\t\t$(\"#idcheck\").append(warningTxt);\r\n");
      out.write("\t  \t\t\t$(\"#member_id\").val('').focus();\r\n");
      out.write("\t  \t\t\treturn false;\r\n");
      out.write("\t  \t\t};\r\n");
      out.write("\t  \t\t//2.입력 아이디 유효성 검사\r\n");
      out.write("\t  \t\tif(!(validate_userid(userId))){//유효성검증 함수 호출(false인 경우)\r\n");
      out.write("\t  \t\t\tvar warningTxt='<font color=\"red\">영문 소문자 시작과 숫자 및 _ 조합만 가능</font>';\r\n");
      out.write("\t  \t\t\t $(\"#idcheck\").text('');\r\n");
      out.write("\t  \t\t\t  $(\"#idcheck\").show();\r\n");
      out.write("\t  \t\t\t  $(\"#idcheck\").append(warningTxt);\r\n");
      out.write("\t  \t\t\t  $(\"#member_id\").val('').focus();\r\n");
      out.write("\t  \t\t\t  return false;\r\n");
      out.write("\t  \t\t};\r\n");
      out.write("\t  \t  //아이디 중복확인\r\n");
      out.write("\t      $.ajax({//$는  jQuery. 즉 jQuery 아작스 함수를 실행\r\n");
      out.write("\t    \t  type:\"post\",//데이터 전송 방식\r\n");
      out.write("\t    \t  url:\"./member/member_idcheck.jsp\", //서버 파일 주소 와 경로\r\n");
      out.write("\t          data: {\"userId\":userId}, //useId에 변수값을 저장하여 넘김\r\n");
      out.write("\t          datatype:\"jsp\",// 통신할 문서의 데이터 타입\r\n");
      out.write("\t          success: function (data) {//통신이 성공한 경우 결과값을 data에 저장\r\n");
      out.write("\t        \t  if(data==1){//아이디가 중복인 경우      \t\t\r\n");
      out.write("\t        \t\tvar warningTxt='<font color=\"red\">중복 아이디입니다.</font>';\r\n");
      out.write("\t        \t\t$(\"#idcheck\").text('');\r\n");
      out.write("\t          \t\t$(\"#idcheck\").show();\r\n");
      out.write("\t          \t\t$(\"#idcheck\").append(warningTxt);\r\n");
      out.write("\t            \t$(\"#member_id\").val('').focus();\r\n");
      out.write("\t            \treturn false;\t   \t     \r\n");
      out.write("\t        \t  }else{//아이디가 중복이 아닌 경우\r\n");
      out.write("\t        \t\tvar warningTxt='<font color=\"blue\">사용가능한 아이디입니다.</font>';\r\n");
      out.write("\t        \t\t$(\"#idcheck\").text('');\r\n");
      out.write("\t        \t\t$(\"#idcheck\").show();\r\n");
      out.write("\t        \t\t$(\"#idcheck\").append(warningTxt);\r\n");
      out.write("\t        \t\t$(\"#member_pass\").focus(); // member_pass 상자로 이동\r\n");
      out.write("\t        \t  }  \t    \t  \r\n");
      out.write("\t          },\r\n");
      out.write("\t      \t  error:function(){ // 비동기 통신 실패\r\n");
      out.write("\t      \t\t  alert(\"data error\");\r\n");
      out.write("\t      \t  }\r\n");
      out.write("\t      });//$.ajax\t\r\n");
      out.write("\t      return false; // 다음 태그 수행 금지   \r\n");
      out.write("\t     });\t   \r\n");
      out.write("\t //아이디 중복 체크 끝\r\n");
      out.write("\t   function validate_userid(userId){\r\n");
      out.write("\t \t  var pattern= new RegExp(/^[a-z][a-z0-9_]+$/);//영문소문자,숫자와_만 허용\r\n");
      out.write("\t \t  return pattern.test(userId);\r\n");
      out.write("\t   }\r\n");
      out.write("   }); // $(function()\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <div id=\"join_wrap\">\r\n");
      out.write("    <h2 class=\"join_title\">회원가입</h2>\r\n");
      out.write("    <form name=\"f\" method=\"post\" action=\"member_Join_ok.do\"\r\n");
      out.write("    onsubmit=\"return mem_check()\" enctype=\"multipart/form-data\">\r\n");
      out.write("    <!-- enctype=\"multipart/form-data\"은 이진파일(바이너리 모드)을 \r\n");
      out.write("       업로드 할 경우 지정하는 속성이다. -->      \r\n");
      out.write("   <table id=\"join_t\">\r\n");
      out.write("      <tr>\r\n");
      out.write("         <th>회원아이디</th>\r\n");
      out.write("         <td><input name=\"member_id\" id=\"member_id\" size=\"14\"/>            \r\n");
      out.write("         <input type=\"button\" value=\"아이디중복체크\" id=\"idcheck_btn\"/>\r\n");
      out.write("         <br>\r\n");
      out.write("         <!-- 경고문이 출력되는 위치  -->\r\n");
      out.write("         <span id=\"idcheck\"> </span>\r\n");
      out.write("         </td>      \r\n");
      out.write("      </tr>     \r\n");
      out.write("      <tr>\r\n");
      out.write("         <th>비밀번호</th>\r\n");
      out.write("         <td> \r\n");
      out.write("           <input type=\"password\" name=\"member_pass\" \r\n");
      out.write("                id=\"member_pass\" size=\"14\" />\r\n");
      out.write("          </td>\r\n");
      out.write("      </tr>            \r\n");
      out.write("      <tr>\r\n");
      out.write("         <th>비밀번호 확인</th>\r\n");
      out.write("         <td> \r\n");
      out.write("           <input type=\"password\" name=\"member_pass2\" \r\n");
      out.write("                id=\"member_pass2\" size=\"14\" />\r\n");
      out.write("          </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("         <th>회원이름</th>\r\n");
      out.write("         <td> \r\n");
      out.write("           <input name=\"member_name\" id=\"member_name\" size=\"14\"/>\r\n");
      out.write("          </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("         <th>닉네임</th>\r\n");
      out.write("         <td> \r\n");
      out.write("           <input name=\"member_nickname\" id=\"member_nickname\" \r\n");
      out.write("           size=\"20\"/>\r\n");
      out.write("          </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("         <th>우편번호</th>\r\n");
      out.write("         <td> \r\n");
      out.write("           <input name=\"member_zip1\" id=\"member_zip1\" size=\"3\"\r\n");
      out.write("              readonly onclick=\"post_search()\"/>-<input \r\n");
      out.write("            name=\"member_zip2\" id=\"member_zip2\" size=\"3\"\r\n");
      out.write("            readonly onclick=\"post_search()\"/>\r\n");
      out.write("          <!-- readonly 속성 : 텍스트상자에 데이터를 입력할 수 없고,\r\n");
      out.write("                        단지 읽기 전용으로 지정할 경우 사용하는 속성 -->\r\n");
      out.write("            <input type=\"button\" value=\"우편번호찾기\"\r\n");
      out.write("                   onclick=\"post_check()\"/>                                                                \r\n");
      out.write("         </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("         <th>주소</th>\r\n");
      out.write("         <td> \r\n");
      out.write("           <input name=\"member_addr1\" id=\"member_addr1\" \r\n");
      out.write("           size=\"50\" readonly onclick=\"post_search()\"/>\r\n");
      out.write("          </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("         <th>나머지 주소</th>\r\n");
      out.write("         <td> \r\n");
      out.write("           <input name=\"member_addr2\" id=\"member_addr2\"\r\n");
      out.write("            size=\"40\"/>\r\n");
      out.write("          </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("         <th>프로필 사진</th>\r\n");
      out.write("         <td> \r\n");
      out.write("           <input type=\"file\" name=\"member_profilename\"/>\r\n");
      out.write("          </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("   </table> \r\n");
      out.write("   <div id=\"join_menu\">\r\n");
      out.write("      <input type=\"submit\" value=\"가입\"/>\r\n");
      out.write("      <input type=\"reset\" value=\"취소\"\r\n");
      out.write("              onclick=\"$('#member_id').focus();\"/>   \r\n");
      out.write("   </div>          \r\n");
      out.write("   </form>   \r\n");
      out.write("  </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
